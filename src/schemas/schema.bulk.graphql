input ProductVariantSet {
    "Parent Product"
    product: ProductInput

    "Child variants of the product"
    variants: [ProductVariantInput]!
}


"CreateBulkProductInput"
input CreateBulkProductInput {
    "Variants input array"
    data: [ProductVariantSet]!

    "The shop id"
    shopId: ID!
}

"Response payload of `createBulkProduct` mutation"
type CreateBulkProductPayload  {
    "The same string you sent with the mutation params, for matching mutation calls with their responses"
    clientMutationId: String

    "The created product variants"
    status: [String]
}

"UpdateProductBySkuPayload"
type UpdateProductBySkuPayload {
    id:  [String]
}

"Product by sku object details"
input ProductBySkuDetails{
    "SKU"
    sku: String

    "Prices to update"
    price: String

    "special  price"
    special_price: String

    "ranking"
    ranking: String
}

"UpdateProductBySku"
input UpdateProductBySkuInput {
    "Input data"
    data: [ProductBySkuDetails]!

    "ID of shop that owns the variant to update"
    shopId: ID!
}


# createBulkProduct schema allows the following mutation:
extend type Mutation {
    "Create products in bulk"
    createBulkProduct (
        "Mutation input"
        input: CreateBulkProductInput!
    ): CreateBulkProductPayload

    "Create products in bulk"
    updateProductBySku (
        "Mutation input"
        input: UpdateProductBySkuInput!
    ): UpdateProductBySkuPayload
}

